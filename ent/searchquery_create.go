// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/karust/openserp/ent/searchquery"
)

// SearchQueryCreate is the builder for creating a SearchQuery entity.
type SearchQueryCreate struct {
	config
	mutation *SearchQueryMutation
	hooks    []Hook
}

// SetQuery sets the "query" field.
func (sqc *SearchQueryCreate) SetQuery(s string) *SearchQueryCreate {
	sqc.mutation.SetQuery(s)
	return sqc
}

// SetLocation sets the "location" field.
func (sqc *SearchQueryCreate) SetLocation(s string) *SearchQueryCreate {
	sqc.mutation.SetLocation(s)
	return sqc
}

// SetLanguage sets the "language" field.
func (sqc *SearchQueryCreate) SetLanguage(s string) *SearchQueryCreate {
	sqc.mutation.SetLanguage(s)
	return sqc
}

// SetCreatedAt sets the "created_at" field.
func (sqc *SearchQueryCreate) SetCreatedAt(t time.Time) *SearchQueryCreate {
	sqc.mutation.SetCreatedAt(t)
	return sqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sqc *SearchQueryCreate) SetNillableCreatedAt(t *time.Time) *SearchQueryCreate {
	if t != nil {
		sqc.SetCreatedAt(*t)
	}
	return sqc
}

// Mutation returns the SearchQueryMutation object of the builder.
func (sqc *SearchQueryCreate) Mutation() *SearchQueryMutation {
	return sqc.mutation
}

// Save creates the SearchQuery in the database.
func (sqc *SearchQueryCreate) Save(ctx context.Context) (*SearchQuery, error) {
	sqc.defaults()
	return withHooks(ctx, sqc.sqlSave, sqc.mutation, sqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sqc *SearchQueryCreate) SaveX(ctx context.Context) *SearchQuery {
	v, err := sqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sqc *SearchQueryCreate) Exec(ctx context.Context) error {
	_, err := sqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqc *SearchQueryCreate) ExecX(ctx context.Context) {
	if err := sqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sqc *SearchQueryCreate) defaults() {
	if _, ok := sqc.mutation.CreatedAt(); !ok {
		v := searchquery.DefaultCreatedAt()
		sqc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sqc *SearchQueryCreate) check() error {
	if _, ok := sqc.mutation.Query(); !ok {
		return &ValidationError{Name: "query", err: errors.New(`ent: missing required field "SearchQuery.query"`)}
	}
	if v, ok := sqc.mutation.Query(); ok {
		if err := searchquery.QueryValidator(v); err != nil {
			return &ValidationError{Name: "query", err: fmt.Errorf(`ent: validator failed for field "SearchQuery.query": %w`, err)}
		}
	}
	if _, ok := sqc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "SearchQuery.location"`)}
	}
	if _, ok := sqc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "SearchQuery.language"`)}
	}
	if _, ok := sqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SearchQuery.created_at"`)}
	}
	return nil
}

func (sqc *SearchQueryCreate) sqlSave(ctx context.Context) (*SearchQuery, error) {
	if err := sqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sqc.mutation.id = &_node.ID
	sqc.mutation.done = true
	return _node, nil
}

func (sqc *SearchQueryCreate) createSpec() (*SearchQuery, *sqlgraph.CreateSpec) {
	var (
		_node = &SearchQuery{config: sqc.config}
		_spec = sqlgraph.NewCreateSpec(searchquery.Table, sqlgraph.NewFieldSpec(searchquery.FieldID, field.TypeInt))
	)
	if value, ok := sqc.mutation.Query(); ok {
		_spec.SetField(searchquery.FieldQuery, field.TypeString, value)
		_node.Query = value
	}
	if value, ok := sqc.mutation.Location(); ok {
		_spec.SetField(searchquery.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := sqc.mutation.Language(); ok {
		_spec.SetField(searchquery.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := sqc.mutation.CreatedAt(); ok {
		_spec.SetField(searchquery.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// SearchQueryCreateBulk is the builder for creating many SearchQuery entities in bulk.
type SearchQueryCreateBulk struct {
	config
	err      error
	builders []*SearchQueryCreate
}

// Save creates the SearchQuery entities in the database.
func (sqcb *SearchQueryCreateBulk) Save(ctx context.Context) ([]*SearchQuery, error) {
	if sqcb.err != nil {
		return nil, sqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sqcb.builders))
	nodes := make([]*SearchQuery, len(sqcb.builders))
	mutators := make([]Mutator, len(sqcb.builders))
	for i := range sqcb.builders {
		func(i int, root context.Context) {
			builder := sqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SearchQueryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sqcb *SearchQueryCreateBulk) SaveX(ctx context.Context) []*SearchQuery {
	v, err := sqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sqcb *SearchQueryCreateBulk) Exec(ctx context.Context) error {
	_, err := sqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sqcb *SearchQueryCreateBulk) ExecX(ctx context.Context) {
	if err := sqcb.Exec(ctx); err != nil {
		panic(err)
	}
}
