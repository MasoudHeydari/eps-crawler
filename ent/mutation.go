// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/karust/openserp/core"
	"github.com/karust/openserp/ent/predicate"
	"github.com/karust/openserp/ent/searchquery"
	"github.com/karust/openserp/ent/serp"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSERP        = "SERP"
	TypeSearchQuery = "SearchQuery"
)

// SERPMutation represents an operation that mutates the SERP nodes in the graph.
type SERPMutation struct {
	config
	op              Op
	typ             string
	id              *int
	url             *string
	title           *string
	description     *string
	contact_info    *core.ContactInfo
	key_words       *[]string
	appendkey_words []string
	is_read         *bool
	created_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*SERP, error)
	predicates      []predicate.SERP
}

var _ ent.Mutation = (*SERPMutation)(nil)

// serpOption allows management of the mutation configuration using functional options.
type serpOption func(*SERPMutation)

// newSERPMutation creates new mutation for the SERP entity.
func newSERPMutation(c config, op Op, opts ...serpOption) *SERPMutation {
	m := &SERPMutation{
		config:        c,
		op:            op,
		typ:           TypeSERP,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSERPID sets the ID field of the mutation.
func withSERPID(id int) serpOption {
	return func(m *SERPMutation) {
		var (
			err   error
			once  sync.Once
			value *SERP
		)
		m.oldValue = func(ctx context.Context) (*SERP, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SERP.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSERP sets the old SERP of the mutation.
func withSERP(node *SERP) serpOption {
	return func(m *SERPMutation) {
		m.oldValue = func(context.Context) (*SERP, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SERPMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SERPMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SERPMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SERPMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SERP.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *SERPMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *SERPMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the SERP entity.
// If the SERP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SERPMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *SERPMutation) ResetURL() {
	m.url = nil
}

// SetTitle sets the "title" field.
func (m *SERPMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *SERPMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the SERP entity.
// If the SERP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SERPMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *SERPMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *SERPMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SERPMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the SERP entity.
// If the SERP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SERPMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *SERPMutation) ResetDescription() {
	m.description = nil
}

// SetContactInfo sets the "contact_info" field.
func (m *SERPMutation) SetContactInfo(ci core.ContactInfo) {
	m.contact_info = &ci
}

// ContactInfo returns the value of the "contact_info" field in the mutation.
func (m *SERPMutation) ContactInfo() (r core.ContactInfo, exists bool) {
	v := m.contact_info
	if v == nil {
		return
	}
	return *v, true
}

// OldContactInfo returns the old "contact_info" field's value of the SERP entity.
// If the SERP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SERPMutation) OldContactInfo(ctx context.Context) (v core.ContactInfo, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactInfo: %w", err)
	}
	return oldValue.ContactInfo, nil
}

// ClearContactInfo clears the value of the "contact_info" field.
func (m *SERPMutation) ClearContactInfo() {
	m.contact_info = nil
	m.clearedFields[serp.FieldContactInfo] = struct{}{}
}

// ContactInfoCleared returns if the "contact_info" field was cleared in this mutation.
func (m *SERPMutation) ContactInfoCleared() bool {
	_, ok := m.clearedFields[serp.FieldContactInfo]
	return ok
}

// ResetContactInfo resets all changes to the "contact_info" field.
func (m *SERPMutation) ResetContactInfo() {
	m.contact_info = nil
	delete(m.clearedFields, serp.FieldContactInfo)
}

// SetKeyWords sets the "key_words" field.
func (m *SERPMutation) SetKeyWords(s []string) {
	m.key_words = &s
	m.appendkey_words = nil
}

// KeyWords returns the value of the "key_words" field in the mutation.
func (m *SERPMutation) KeyWords() (r []string, exists bool) {
	v := m.key_words
	if v == nil {
		return
	}
	return *v, true
}

// OldKeyWords returns the old "key_words" field's value of the SERP entity.
// If the SERP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SERPMutation) OldKeyWords(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeyWords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeyWords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeyWords: %w", err)
	}
	return oldValue.KeyWords, nil
}

// AppendKeyWords adds s to the "key_words" field.
func (m *SERPMutation) AppendKeyWords(s []string) {
	m.appendkey_words = append(m.appendkey_words, s...)
}

// AppendedKeyWords returns the list of values that were appended to the "key_words" field in this mutation.
func (m *SERPMutation) AppendedKeyWords() ([]string, bool) {
	if len(m.appendkey_words) == 0 {
		return nil, false
	}
	return m.appendkey_words, true
}

// ResetKeyWords resets all changes to the "key_words" field.
func (m *SERPMutation) ResetKeyWords() {
	m.key_words = nil
	m.appendkey_words = nil
}

// SetIsRead sets the "is_read" field.
func (m *SERPMutation) SetIsRead(b bool) {
	m.is_read = &b
}

// IsRead returns the value of the "is_read" field in the mutation.
func (m *SERPMutation) IsRead() (r bool, exists bool) {
	v := m.is_read
	if v == nil {
		return
	}
	return *v, true
}

// OldIsRead returns the old "is_read" field's value of the SERP entity.
// If the SERP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SERPMutation) OldIsRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsRead: %w", err)
	}
	return oldValue.IsRead, nil
}

// ResetIsRead resets all changes to the "is_read" field.
func (m *SERPMutation) ResetIsRead() {
	m.is_read = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SERPMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SERPMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SERP entity.
// If the SERP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SERPMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SERPMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the SERPMutation builder.
func (m *SERPMutation) Where(ps ...predicate.SERP) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SERPMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SERPMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SERP, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SERPMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SERPMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SERP).
func (m *SERPMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SERPMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.url != nil {
		fields = append(fields, serp.FieldURL)
	}
	if m.title != nil {
		fields = append(fields, serp.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, serp.FieldDescription)
	}
	if m.contact_info != nil {
		fields = append(fields, serp.FieldContactInfo)
	}
	if m.key_words != nil {
		fields = append(fields, serp.FieldKeyWords)
	}
	if m.is_read != nil {
		fields = append(fields, serp.FieldIsRead)
	}
	if m.created_at != nil {
		fields = append(fields, serp.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SERPMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case serp.FieldURL:
		return m.URL()
	case serp.FieldTitle:
		return m.Title()
	case serp.FieldDescription:
		return m.Description()
	case serp.FieldContactInfo:
		return m.ContactInfo()
	case serp.FieldKeyWords:
		return m.KeyWords()
	case serp.FieldIsRead:
		return m.IsRead()
	case serp.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SERPMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case serp.FieldURL:
		return m.OldURL(ctx)
	case serp.FieldTitle:
		return m.OldTitle(ctx)
	case serp.FieldDescription:
		return m.OldDescription(ctx)
	case serp.FieldContactInfo:
		return m.OldContactInfo(ctx)
	case serp.FieldKeyWords:
		return m.OldKeyWords(ctx)
	case serp.FieldIsRead:
		return m.OldIsRead(ctx)
	case serp.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SERP field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SERPMutation) SetField(name string, value ent.Value) error {
	switch name {
	case serp.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case serp.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case serp.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case serp.FieldContactInfo:
		v, ok := value.(core.ContactInfo)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactInfo(v)
		return nil
	case serp.FieldKeyWords:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeyWords(v)
		return nil
	case serp.FieldIsRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsRead(v)
		return nil
	case serp.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SERP field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SERPMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SERPMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SERPMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SERP numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SERPMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(serp.FieldContactInfo) {
		fields = append(fields, serp.FieldContactInfo)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SERPMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SERPMutation) ClearField(name string) error {
	switch name {
	case serp.FieldContactInfo:
		m.ClearContactInfo()
		return nil
	}
	return fmt.Errorf("unknown SERP nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SERPMutation) ResetField(name string) error {
	switch name {
	case serp.FieldURL:
		m.ResetURL()
		return nil
	case serp.FieldTitle:
		m.ResetTitle()
		return nil
	case serp.FieldDescription:
		m.ResetDescription()
		return nil
	case serp.FieldContactInfo:
		m.ResetContactInfo()
		return nil
	case serp.FieldKeyWords:
		m.ResetKeyWords()
		return nil
	case serp.FieldIsRead:
		m.ResetIsRead()
		return nil
	case serp.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown SERP field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SERPMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SERPMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SERPMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SERPMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SERPMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SERPMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SERPMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SERP unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SERPMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SERP edge %s", name)
}

// SearchQueryMutation represents an operation that mutates the SearchQuery nodes in the graph.
type SearchQueryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	query         *string
	location      *string
	language      *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SearchQuery, error)
	predicates    []predicate.SearchQuery
}

var _ ent.Mutation = (*SearchQueryMutation)(nil)

// searchqueryOption allows management of the mutation configuration using functional options.
type searchqueryOption func(*SearchQueryMutation)

// newSearchQueryMutation creates new mutation for the SearchQuery entity.
func newSearchQueryMutation(c config, op Op, opts ...searchqueryOption) *SearchQueryMutation {
	m := &SearchQueryMutation{
		config:        c,
		op:            op,
		typ:           TypeSearchQuery,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSearchQueryID sets the ID field of the mutation.
func withSearchQueryID(id int) searchqueryOption {
	return func(m *SearchQueryMutation) {
		var (
			err   error
			once  sync.Once
			value *SearchQuery
		)
		m.oldValue = func(ctx context.Context) (*SearchQuery, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SearchQuery.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSearchQuery sets the old SearchQuery of the mutation.
func withSearchQuery(node *SearchQuery) searchqueryOption {
	return func(m *SearchQueryMutation) {
		m.oldValue = func(context.Context) (*SearchQuery, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SearchQueryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SearchQueryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SearchQueryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SearchQueryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SearchQuery.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetQuery sets the "query" field.
func (m *SearchQueryMutation) SetQuery(s string) {
	m.query = &s
}

// Query returns the value of the "query" field in the mutation.
func (m *SearchQueryMutation) Query() (r string, exists bool) {
	v := m.query
	if v == nil {
		return
	}
	return *v, true
}

// OldQuery returns the old "query" field's value of the SearchQuery entity.
// If the SearchQuery object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SearchQueryMutation) OldQuery(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuery is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuery requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuery: %w", err)
	}
	return oldValue.Query, nil
}

// ResetQuery resets all changes to the "query" field.
func (m *SearchQueryMutation) ResetQuery() {
	m.query = nil
}

// SetLocation sets the "location" field.
func (m *SearchQueryMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *SearchQueryMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the SearchQuery entity.
// If the SearchQuery object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SearchQueryMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *SearchQueryMutation) ResetLocation() {
	m.location = nil
}

// SetLanguage sets the "language" field.
func (m *SearchQueryMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *SearchQueryMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the SearchQuery entity.
// If the SearchQuery object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SearchQueryMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *SearchQueryMutation) ResetLanguage() {
	m.language = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SearchQueryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SearchQueryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SearchQuery entity.
// If the SearchQuery object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SearchQueryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SearchQueryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the SearchQueryMutation builder.
func (m *SearchQueryMutation) Where(ps ...predicate.SearchQuery) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SearchQueryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SearchQueryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SearchQuery, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SearchQueryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SearchQueryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SearchQuery).
func (m *SearchQueryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SearchQueryMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.query != nil {
		fields = append(fields, searchquery.FieldQuery)
	}
	if m.location != nil {
		fields = append(fields, searchquery.FieldLocation)
	}
	if m.language != nil {
		fields = append(fields, searchquery.FieldLanguage)
	}
	if m.created_at != nil {
		fields = append(fields, searchquery.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SearchQueryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case searchquery.FieldQuery:
		return m.Query()
	case searchquery.FieldLocation:
		return m.Location()
	case searchquery.FieldLanguage:
		return m.Language()
	case searchquery.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SearchQueryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case searchquery.FieldQuery:
		return m.OldQuery(ctx)
	case searchquery.FieldLocation:
		return m.OldLocation(ctx)
	case searchquery.FieldLanguage:
		return m.OldLanguage(ctx)
	case searchquery.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SearchQuery field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SearchQueryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case searchquery.FieldQuery:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuery(v)
		return nil
	case searchquery.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case searchquery.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case searchquery.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SearchQuery field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SearchQueryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SearchQueryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SearchQueryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SearchQuery numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SearchQueryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SearchQueryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SearchQueryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SearchQuery nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SearchQueryMutation) ResetField(name string) error {
	switch name {
	case searchquery.FieldQuery:
		m.ResetQuery()
		return nil
	case searchquery.FieldLocation:
		m.ResetLocation()
		return nil
	case searchquery.FieldLanguage:
		m.ResetLanguage()
		return nil
	case searchquery.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown SearchQuery field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SearchQueryMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SearchQueryMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SearchQueryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SearchQueryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SearchQueryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SearchQueryMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SearchQueryMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SearchQuery unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SearchQueryMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SearchQuery edge %s", name)
}
